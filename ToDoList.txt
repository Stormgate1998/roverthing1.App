
Problem 5: Figure out map. Stay in room and use markers if needed.


Have 2 maps, one for drone and one from rover

Render things in a radius of 10 from rover

Render things more for drone- check drone radius



Make a 2D array from list, have it include everything. Storage is cheap. Don't render everything though.



Separate drone and rover pages


Make a 2d-array of tuples? something with 2 values: int difficulty, bool lowres.

If they're lowres and in neighbors for either drone or rover, change bool and update. else, leave as is.

Make functions for drone and rover in API service. Whenever any move is made, take the neighbors and the map and update it
in viewmodels, update map for every move. 

Figure out how to color code them.


In display, either make all the labels and individually link them, or figure out a collection view or something to do it. 
Either way, have the labels display the difficulty. 
Hardest part will be color coding. 










1 pts: persist the token between app restarts
2 pts: check if token is current by calling /game/status
2 pts: invalidate token and force re-join if necessary
5 pts: user cannot access map, stats, or FPV pages without a valid token
10 pts: map page showing your location and difficulty of any known cells, or show avg. difficulty of other cells in some other style (e.g. grayed out)
10 pts: automatically update map page as Ingenuity flies around
10 pts: statistics page showing your target coordinate, perseverance coordinates and battery level, ingenuity coordinates and battery level
10 pts: polish & styling (no default styles, consistent style & color throughout, good use of backgrounds, borders, color scheme, etc.)

20 pts: ingenuity route planner page: give the user a way to plot a route for the helicopter to follow, 
automatically update the map page with the returned high-res terrain data.


function: Advanced turning (rotate until going right direction, then go one cell. 
Await it, and have a ready tag that shows up when it's ready)

function: Map updater, every time map data comes back, take that data and update the map

IDrawable


More complex stuff:


Have a label grid of x size, filled with




Day 1:
0 pts: advanced turning (DONE)
1 pts: persist the token between app restarts  (check)
2 pts: invalidate token and force re-join if necessary (Automatic checking, should be 200. If not redirect to login. Or if token is on default, redirect to login) (check)
2 pts: check if token is current by calling /game/status (see above) (check)
5 pts: user cannot access map, stats, or FPV pages without a valid token (On start for all pages, get token from user preferences, and test it using above functions. if fails, go to login)


 
Day 2:
10 pts: statistics page showing your target coordinate, perseverance coordinates and battery level, ingenuity coordinates and battery level
0 pts move api calls to independent service. (Done)
0 pts: monkeycache map data (use data from previous project (done)
0 pts: Add controller for Ingenuity (done)


Day 3:

10 pts: map page showing your location and difficulty of any known cells, or show avg. difficulty of other cells in some other style (e.g. grayed out) (figure out what data I'm getting. from there, figure out how to store it and display it. Hopefully in-class will help
10 pts: automatically update map page as Ingenuity flies around (see above)
5 pts: show cells in a 5-cell radius from your location (this might be first person specific. Maybe don't do? Otherwise you have map data 
20 pts: ingenuity route planner page: give the user a way to plot a route for the helicopter to follow, (make a list of commands to follow, based on the previous data. Hopefully familiarity with the code will simplify it. Execute commands in order. Use popable list.
automatically update the map page with the returned high-res terrain data. (Mostly done, waiting for map)

Day 4: Polish and styling









make a drone map and a rover map

make a data type MapCell that has a string background color, bool discovered, int difficulty

have them in a radius configuration.




In API service:


make the Map, with all the cells
drone map is only within a certain radius
rover map is smaller radius

drone map doesn't describe difficulty,






public class FullMapViewModel : INotifyPropertyChanged
{
    private Cell[,] _cells;
    public Cell[,] Cells
    {
        get { return _cells; }
        set 
        {
            _cells = value;
            Rows = Cells.GetLength(0);
            Columns = Cells.GetLength(1);
            AssignDiscoveredCellColor();
            OnPropertyChanged();
        }
    }

    private int _rows;
    public int Rows
    {
        get { return _rows; }
        set
        {
            _rows = value;
            OnPropertyChanged();
        }
    }

    private int _columns;
    public int Columns
    {
        get { return _columns; }
        set
        {
            _columns = value;
            OnPropertyChanged();
        }
    }

    public FullMapViewModel()
    {
        // Initialize the Cells property here.
    }

    private void AssignDiscoveredCellColor()
    {
        int rows = Cells.GetLength(0);
        int columns = Cells.GetLength(1);

        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < columns; j++)
            {
                Cell cell = Cells[i, j];
                if (!cell.isdiscovered)
                {
                    int gradient = (255 * cell.difficulty) / 150;
                    cell.color = Color.FromRgb(255 - gradient, 255 - gradient, 255 - gradient);
                }
                else
                {
                    int gradient = (255 * cell.difficulty) / 150;
                    cell.color = Color.FromRgb(255, gradient, gradient);
                }
            }
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}







<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="roverthing1.FullMap"
             Title="FullMap">
    <VerticalStackLayout>
        <CollectionView x:Name="CellsCollectionView"
                        SelectionMode="None">
            <CollectionView.LayoutDefinition>
                <GridLayoutDefinition 
                    Rows="{Binding Rows}"
                    Columns="{Binding Columns}" />
            </CollectionView.LayoutDefinition>
            <CollectionView.ItemTemplate>
                <DataTemplate>
                    <Label 
                        BackgroundColor="{Binding color}"
                        Text="{Binding difficulty}" />
                </DataTemplate>
            </CollectionView.ItemTemplate>
        </CollectionView>
    </VerticalStackLayout>
</ContentPage>